Memory map:

-- ROM / Flash				0x00000000 - 0x1fffffff (512MB)
-- Reserved				0x20000000 - 0x3fffffff (512MB)
-- SRAM					0x40000000 - 0x5fffffff (512MB)
-- External RAM	/ device		0x60000000 - 0x9fffffff (1GB)
-- External RAM / device		0xa0000000 - 0xdfffffff (1GB)		(uncached)
-- Reserved				0xe0000000 - 0xe0ffffff (16MB)
-- Peripheral (SoC segment 0)		0xe1000000 - 0xe1ffffff (16MB)		(uncached)
-- Peripheral (SoC segment 1)		0xe2000000 - 0xe3ffffff (32MB)		(uncached)
-- Peripheral (SoC segment 2)		0xe4000000 - 0xe7ffffff (64MB)		(uncached)
-- Peripheral (SoC segment 3)		0xe8000000 - 0xefffffff (128MB)		(uncached)
-- Peripheral (core)			0xf0000000 - 0xf0ffffff (16MB)		(uncached)
-- Reserved				0xf1000000 - 0xffffffff (240MB)


I/O ports, timers, UART, SPI and I2C interfaces located on segment 0. 1KB of memory space reserved for each peripheral.

Interrupts are non vectored with a fixed priority (in software). Three level of irq handling is performed.
Interrupts are classified by peripheral subsystem, and each subsystem and peripheral class has its interrupt registers.
Interrupts are handled this way: irq -> major class -> segment -> class (group) -> peripheral handler

major classes:

0 - core peripherals
1 - segment 0
2 - segment 1
3 - segment 2
4 - segment 3

For segments, each one has cause and mask registers. The cause register holds interrupts from specific groups. Each group has also cause and mask registers. An interrupt to the core (CAUSE) happens when a segment cause and mask result are not zero. An interrupt appear on the segment cause register when a group cause and mask result are not zero. This way, specific peripherals from a group can be masked (on group cause and mask registers), a whole group can be masked (on segment cause and mask registers) and a whole segment can be masked (on the core CAUSE and MASK registers). Segment interrupt mask is optional. In this case interrupts must be masked directly in the class (group) mask and pass through the segment interrupt requests directly (unmasked).

Peripheral addresses have the following meaning:

0xe1010800
  |/|/|--/
  | | |
  | | |
  | | |--------device / function
  | |----------class (group)
  |------------peripheral (SoC segment)


Example / default SoC peripherals (segment 0)

Segment 0 base		- 0xe1000000
	S0STATUS	- 0xe1000000	(future use) - can be used to identify hw capability. each bit represents presence of a peripheral.
	S0CAUSE		- 0xe1000400	(bit: ..., 5 - I2C, 4 - SPI, 3 - UART, 2 - timer, 1 - GPIO, 0 - reserved (base))
	S0CAUSE_INV	- 0xe1000800	(future use) (invert CAUSE bit, before mask)
	S0MASK		- 0xe1000c00	(future use)

	PAALTCFG0	- 0xe1004000	(pin alternate function for PORTA - defaults to GPIO)

	PBALTCFG0	- 0xe1004400	(pin alternate function for PORTB - defaults to GPIO)
	PCALTCFG0	- 0xe1004800	(pin alternate function for PORTC - defaults to GPIO)
	PDALTCFG0	- 0xe1004c00	(pin alternate function for PORTD - defaults to GPIO)

	DEBUG0		- 0xe100d000
	DEBUG1		- 0xe100d400
	DEBUG2		- 0xe100d800
	DEBUG3		- 0xe100dc00

GPIO base		- 0xe1010000
	GPIOSTATUS	- 0xe1010000	(future use) - can be used to identify hw capability. each bit represents presence of a peripheral.
	GPIOCAUSE	- 0xe1010400	(bit: ..., 3 - PDIN, 2 - PCIN, 1 - PBIN, 0 - PAIN)
	GPIOCAUSE_INV	- 0xe1010800
	GPIOMASK	- 0xe1010c00

	PORTA		- 0xe1014000
	PADDR		- 0xe1014000	(read/write register, data direction)
	PAOUT		- 0xe1014010	(read/write register, port output - 15 - PA15, ..., 1 - PA1, 0 - PA0)			PA out (16 LSBs), alternate function 00
	PAIN		- 0xe1014020	(read register, port input - 15 - PA15, ..., 1 - PA1, 0 - PA0)				PA in (16 MSBs), alternate function 00
	PAIN_INV	- 0xe1014030	(inverts the value of PAIN)
	PAIN_MASK	- 0xe1014040

	PORTB		- 0xe1014400
	PORTC		- 0xe1014800
	PORTD		- 0xe1014c00
	PORTE		- 0xe1015000
	PORTF		- 0xe1015400
	PORTG		- 0xe1015800
	PORTH		- 0xe1015c00


timers base		- 0xe1020000
	TIMERSTATUS	- 0xe1020000	(future use)
	TIMERCAUSE	- 0xe1020400	(bit: ... 3 - TIMER1_OCR, 2 - TIMER1_CTC, 1 - TIMER0(18), 0 - TIMER0(16))
	TIMERCAUSE_INV	- 0xe1020800
	TIMERMASK	- 0xe1020c00

	TIMER0		- 0xe1024000	(special, read only up counter)

	TIMER1		- 0xe1024400	(read/write register)									PA0 / PA8 out
	TIMER1_PRE	- 0xe1024410
	TIMER1_CTC	- 0xe1024420	(read/write register, compare timer, clear on match. inverts output on clear.)		PA0 / PA8 out, alternate function 01 (OSC0 / OSC0H)
	TIMER1_OCR	- 0xe1024430	(read/write register, output compare register. used for PWM generation. output		PA0 / PA8 out, alternate function 10 (PWM0 / PWM0H)
					is set until the timer reaches OCR, then it is clear.)

	TIMER2		- 0xe1024800												PA1 / PA9 out
	TIMER2_PRE	- 0xe1024410
	TIMER2_CTC	- 0xe1024820	(read/write register, compare timer, clear on match. inverts output on clear.)		PA1 / PA9 out, alternate function 01 (OSC1 / OSC1H)
	TIMER2_OCR	- 0xe1024830	(read/write register, output compare register. used for PWM generation. output		PA1 / PA9 out, alternate function 10 (PWM1 / PWM1H)
					is set until the timer reaches OCR, then it is clear.)

	TIMER3		- 0xe1024c00
	TIMER4		- 0xe1025000
	TIMER5		- 0xe1025400
	TIMER6		- 0xe1025800
	TIMER7		- 0xe1025c00

UART base		- 0xe1030000
	UARTSTATUS	- 0xe1030000	(future use)
	UARTCAUSE	- 0xe1030400
	UARTCAUSE_INV	- 0xe1030800
	UARTMASK	- 0xe1030c00

	UART0		- 0xe1034000												PA2 / PA10 tx, PA3 / PA11 rx, alternate function 01 (UART0 / UART0H)
	UART0DIV	- 0xe1034010
	UART1		- 0xe1034400												PA4 / PA12 tx, PA5 / PA13 rx, alternate function 01 (UART1 / UART1H)
	UART1DIV	- 0xe1034410

	UART2		- 0xe1034800
	UART3		- 0xe1034c00
	UART4		- 0xe1035000
	UART5		- 0xe1035400
	UART6		- 0xe1035800
	UART7		- 0xe1035c00

SPI base		- 0xe1040000
	SPISTATUS	- 0xe1040000	(future use)
	SPICAUSE	- 0xe1040400
	SPICAUSE_INV	- 0xe1040800
	SPIMASK		- 0xe1040c00

	SPI0		- 0xe1044000												PA4 / PA12 (sel), PA5 / PA13 (clk), PA6 / PA14 (mosi), PA7 / PA15 (miso), alternate function 10 (SPI0 / SPI0H)
	SPI1		- 0xe1044400												PA0 / PA8 (sel), PA1 / PA9 (clk), PA2 / PA10 (mosi), PA3 / PA11 (miso), alternate function 11 (SPI1 / SPI1H)
	SPI2		- 0xe1044800
	SPI3		- 0xe1044c00

I2C base		- 0xe1050000
	I2CSTATUS	- 0xe1050000	(future use)
	I2CCAUSE	- 0xe1050400
	I2CCAUSE_INV	- 0xe1050800
	I2CMASK		- 0xe1050c00

	I2C0		- 0xe1054000
	I2C1		- 0xe1054400
	I2C2		- 0xe1054800
	I2C3		- 0xe1054c00

DAC base		- 0xe1060000
ADC base		- 0xe1070000

pin alternate functions (PAALTCFG0):
- each register is divided in 2 bit fields, so a pin can have four different functionalities.
- the 2 bit fields control a 4 to 1 MUX for each pin in each port.
- one register holds the configuration for a full GPIO port. LSBs are for outputs and MSBs for inputs.
- bit field configuration for a pin on PAALTCFG0, for example:
00 - first function (GPIO)
01 - second function
10 - third function
11 - fourth function or cascade to PAALTCFG1 for additional functions
- the same set of functions is available on the lower part (8 LSBs) and the higher part (8 MSBs). this way,
specific alternate functions can be moved to the higher part, freeing up pins on the lower part.

timers prescaler:
- the prescaler source is taken from the counter (timer0) register. the value of this register indexes a given bit
  on this register, and can be used to slow the counters down.
