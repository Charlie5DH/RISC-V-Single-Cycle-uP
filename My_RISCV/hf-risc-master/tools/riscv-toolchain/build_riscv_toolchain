#!/bin/sh
# this script was written by Sergio Johann Filho [sergio.johann@acad.pucrs.br]
#
# in order to build the toolchain, we need some basic tools:
# flex bison libgmp3-dev libmpfr-dev autoconf texinfo build-essential libncurses5-dev
#
# you don't need to run this script as root. after completion, just move the
# riscv32-unknown-elf directory to its place (e.g /usr/local) and add the tools directory
# to the PATH environment variable (export $PATH:=$PATH:/usr/local/riscv32-unknown-elf/gcc/bin).
# alternatively, the compiler may be left anywhere in the user home directory. Also, create
# a symbolic link in the riscv32-unknown-elf directory (gcc-8.3.0 -> gcc) to support multiple
# versions of the toolchain.
#

binutils_base="binutils-2.32"
gcc_base="gcc-8.3.0"
newlib_base="newlib-3.1.0"
gdb_base="gdb-8.2.1"

root_dir=`pwd`

TARGET=riscv32-unknown-elf
PREFIX=${root_dir}/$TARGET/${gcc_base}
BUILD=i686-linux-gnu

# setup our toolchain new path
export PATH=$PREFIX/bin:$PATH

dl_dir="${root_dir}/download"
src_dir="${root_dir}/source"
bld_dir="${root_dir}/build"
install_dir="${root_dir}/install"

mkdir ${src_dir}
mkdir ${bld_dir}
mkdir ${install_dir}
mkdir ${dl_dir}

# download all sources
cd $dl_dir
wget -c ftp://ftp.gnu.org/gnu/binutils/${binutils_base}.tar.gz
wget -c ftp://ftp.gnu.org/gnu/gcc/${gcc_base}/${gcc_base}.tar.gz
wget -c ftp://sources.redhat.com/pub/newlib/${newlib_base}.tar.gz
wget -c ftp://ftp.gnu.org/gnu/gdb/${gdb_base}.tar.gz

# unpack everything
cd ${src_dir}
tar -zxvf ${dl_dir}/"${binutils_base}.tar.gz"
tar -zxvf ${dl_dir}/"${gcc_base}.tar.gz"
tar -zxvf ${dl_dir}/"${newlib_base}.tar.gz"
tar -zxvf ${dl_dir}/"${gdb_base}.tar.gz"

#
# build binutils
#
cd ${bld_dir}
mkdir ${binutils_base}
cd ${binutils_base}
${src_dir}/${binutils_base}/configure --prefix=$PREFIX --target=$TARGET
	--with-arch=rv32i --with-sysroot --disable-nls --disable-werror
make -j2 all
make install

#
# build GCC
#
cd ${src_dir}/${gcc_base}
./contrib/download_prerequisites

cd ${bld_dir}
mkdir ${gcc_base}
cd ${gcc_base}
${src_dir}/${gcc_base}/configure --prefix=$PREFIX --target=$TARGET \
	--with-arch=rv32i --with-abi=ilp32 --disable-nls --enable-languages=c \
	--enable-interwork --enable-multilib --with-system-zlib --with-newlib \
	--disable-shared --without-headers
make -j2 all-gcc
make install-gcc

#
# build newlib
#
cd ${bld_dir}
mkdir ${newlib_base}
cd ${newlib_base}
${src_dir}/${newlib_base}/configure --prefix=$PREFIX --target=$TARGET \
	--with-arch=rv32i --with-abi=ilp32 --disable-nls --enable-interwork \
	--enable-multilib --disable-newlib-supplied-syscalls
make -j2 all
make install

#
# build final GCC
#
cd ${bld_dir}
cd ${gcc_base}
${src_dir}/${gcc_base}/configure --prefix=$PREFIX --target=$TARGET \
	--with-arch=rv32i --with-abi=ilp32  --disable-nls --enable-languages=c,c++ \
	--enable-interwork --enable-multilib --with-system-zlib --with-newlib \
	--disable-shared
make -j2 all
make install

#
# build GDB
#
cd ${bld_dir}
mkdir ${gdb_base}
cd ${gdb_base}
${src_dir}/${gdb_base}/configure --prefix=$PREFIX --target=$TARGET \
 --enable-interwork --enable-multilib
make -j2 all
make install
